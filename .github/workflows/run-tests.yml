name: Run tests
on:
  push:
    paths:
     - 'kpwn_db/**'
     - 'expkit/**'
  pull_request:
  workflow_dispatch:
    inputs:
      target:
        description: 'Distro and release name'
        type: string
        required: false
        default: 'kernelctf lts-6.1.81'
  workflow_call:
    inputs:
      target:
        type: string
      silence_notifications:
        type: boolean
        required: false
        default: true
permissions: {}
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Fix input variables
        id: vars
        env:
          target: ${{inputs.target}}
        run: echo "target=${target:-kernelctf lts-6.1.81}" >> $GITHUB_OUTPUT

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Install Linux package prerequisites
        run: sudo apt-get update && sudo apt install -yq --no-install-recommends build-essential flex bison bc ca-certificates libelf-dev libssl-dev cpio pahole qemu-system-x86 libkeyutils-dev

      - name: Install tool prerequisites
        run: |
          cd kpwn_db
          pip install -r requirements.txt

      - name: Download cached kpwn module # to skip compilation and speedup tests
        if: ${{ steps.vars.outputs.target == 'kernelctf lts-6.1.81' }}
        run: curl https://storage.googleapis.com/kernel-research/pwnkit/kpwn_lts6181_v1.tar --create-dirs -o kernel-image-db/releases/kernelctf/lts-6.1.81/custom_modules.tar

      - name: Download target release
        if: ${{ steps.vars.outputs.target != 'kernelctf lts-6.1.81' }}
        working-directory: ./kernel-image-db
        run: |
          ./download_release.sh ${{steps.vars.outputs.target}} "vmlinuz,modules"
          ./collect_runtime_data.sh  # we need version.txt for compiling the correct kpwn module

      - name: Test kpwn_db
        if: ${{ success() || failure() }}
        working-directory: ./kpwn_db
        run: ./test.sh

      - name: Test expkit (local tests only)
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: make test

      - name: Test expkit (QEMU)
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: CUSTOM_MODULES_KEEP=1 ./run_tests.sh ${{steps.vars.outputs.target}} --tap

      - name: Build expkit samples
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: make PREREQ=1 samples

      - name: Test expkit samples
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: CUSTOM_MODULES_KEEP=1 make -C samples/stack_pivot_and_rop TARGET="${{steps.vars.outputs.target}}" test

      - name: Test expkit (local TODO tests only)
        if: ${{ success() || failure() }}
        continue-on-error: true
        working-directory: ./expkit
        run: "make bin/test && bin/test --test-suites StaticTests --tests TODO"

      - name: Test expkit (QEMU TODO tests only)
        if: ${{ success() || failure() }}
        continue-on-error: true
        working-directory: ./expkit
        run: CUSTOM_MODULES_KEEP=1 ./run_tests.sh ${{steps.vars.outputs.target}} --tap --test-suites RuntimeTests --tests TODO

      - name: Send Google Chat Notification (on failure)
        if: ${{ failure() && !inputs.silence_notifications }}
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_EXPKIT }}
        run: node ./scripts/send_notification.js
