name: Run tests
on:
  push:
    paths:
     - 'kpwn_db/**'
     - 'expkit/**'
  pull_request:
  workflow_dispatch:
    inputs:
      target:
        description: 'Distro and release name'
        type: string
        required: false
        default: 'kernelctf lts-6.1.81'
  workflow_call:
    inputs:
      target:
        type: string
      silence_notifications:
        type: boolean
        required: false
        default: true
permissions: {}
jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Fix input variables
        id: vars
        env:
          target: ${{ inputs.target }}
        run: |
            target=${target:-kernelctf lts-6.1.81}
            echo "target=$target" >> $GITHUB_OUTPUT
            echo "logfn=${target// /_}" >> $GITHUB_OUTPUT

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Install Linux package prerequisites
        run: |
            sudo apt-get update
            sudo apt remove parallel -yq
            sudo apt install -yq --no-install-recommends build-essential flex bison bc ca-certificates libelf-dev libssl-dev cpio pahole qemu-system-x86 libkeyutils-dev moreutils

      - name: Install tool prerequisites
        run: |
          cd kpwn_db
          pip install -r requirements.txt

      - name: Environment info
        run: |
          set -x
          g++ --version
          ldd --version
          man parallel|cat

      - name: Download cached kpwn module # to skip compilation and speedup tests
        if: ${{ steps.vars.outputs.target == 'kernelctf lts-6.1.81' }}
        # uploaded with "gsutil cp -Z -a public-read kernel-image-db/releases/kernelctf/lts-6.1.81/custom_modules.tar gs://kernel-research/pwnkit/kpwn_lts6181_v4.tar"
        run: curl https://storage.googleapis.com/kernel-research/pwnkit/kpwn_lts6181_v5.tar --create-dirs -o kernel-image-db/releases/kernelctf/lts-6.1.81/custom_modules.tar

      - name: Compile kpwn for target
        if: ${{ steps.vars.outputs.target != 'kernelctf lts-6.1.81' }}
        run: |
          ./kernel-image-db/download_release.sh ${{steps.vars.outputs.target}} "vmlinuz,modules"
          ./kernel-image-db/collect_runtime_data.sh  # we need version.txt for compiling the correct kpwn module
          ./kernel-image-runner/compile_custom_modules.sh ${{steps.vars.outputs.target}} kpwn

      - name: Test kpwn_db
        if: ${{ success() || failure() }}
        working-directory: ./kpwn_db
        run: ./test.sh

      - name: Test expkit (local tests only)
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: make -j`nproc` test

      - name: Test expkit (QEMU)
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: CUSTOM_MODULES_KEEP=1 timeout 2m ./run_tests.sh ${{ steps.vars.outputs.target }} 20 --tap

      - name: Move test results to separate dir
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: mv test_results test_results_prod

      - name: Build expkit samples
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: make -j`nproc` PREREQ=1 samples

      - name: Test expkit samples
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: CUSTOM_MODULES_KEEP=1 timeout 2m make -j`nproc` -C samples/stack_pivot_and_rop TARGET="${{ steps.vars.outputs.target }}" test stability_test

      - name: Test expkit (local TODO tests only)
        if: ${{ success() || failure() }}
        continue-on-error: true
        working-directory: ./expkit
        run: timeout 2m make -j`nproc` bin/test && bin/test --test-suites StaticTests --tests TODO

      - name: Test expkit (QEMU TODO tests only)
        if: ${{ success() || failure() }}
        continue-on-error: true
        working-directory: ./expkit
        run: CUSTOM_MODULES_KEEP=1 timeout 2m ./run_tests.sh ${{ steps.vars.outputs.target }} 1 --tap --test-suites RuntimeTests --tests TODO

      - name: Move test results to separate dir
        if: ${{ success() || failure() }}
        working-directory: ./expkit
        run: mv test_results test_results_todo

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs_${{ steps.vars.outputs.logfn }}
          path: |
            expkit/samples/**/exp
            expkit/bin/test
            expkit/test_results*
            kernel-image-db/releases/**/custom_modules.tar
            kernel-image-runner/test/stability_test_outputs

      - name: Send Google Chat Notification (on failure)
        if: ${{ failure() && !inputs.silence_notifications }}
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_EXPKIT }}
        run: node ./scripts/send_notification.js
