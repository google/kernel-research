# .kpwn file format structure

magic = KPWN (u4)
version_major = 0x1 (u2) - file with newer version_major
                           is not compatible with older readers
version_minor = 0x1 (u2) - file with newer version_minor
                           is compatible with older readers
meta_size (u4) - useful for older readers to skip newer metadata
meta:
  num_symbols (u4)
  symbols[num_symbols]
    struct_size (u2)
    type_id (u4)
    name_len (u2)
    name[name_len] (zstr)
  num_rop_actions (u4)
  rop_actions[num_rop_actions]
    struct_size (u2)
    type_id (u4)
    desc_len (u2)
    desc[desc_len] (zstr)
    num_args (u1)
    arguments[num_args]
      name_len (u2)
      name[name_len] (zstr)
      flags (u1)
        required - 0x1
      default_value (u8) - only if required == 0
  structs[varsize]
    struct_name[varsize] (zstr)
    fields[varsize]
      field_name [varsize] (zstr)
      optional (u1)
  struct_layouts_db_offset (u4)
num_targets (u4)
targets[num_targets]
  struct_size (u4) - so we can jump over easily and
                     we can add fields while keeping compatibility
  distro_len (u2)
  distro[distro_len] (zstr)
  release_name_len (u2)
  release_name[release_name_len] (zstr)
  version_len (u2)
  version[version_len] (zstr)
  symbols[num_symbols]
    offset (u4)
  rop_actions[num_rop_actions]
    struct_size (u2) - 0 means this ROP action is not supported
    items[varsize]
      type_and_value (uint) - "(value << 2) | type"
        the 2 LSB bits: enum, 0 = constant_value, 1 = symbol, 2 = argument
        other bits: value
  stack_pivots
    struct_size (u2) - to skip stack_pivots if we don't care
    one_gadgets[varsize]
      address (uint)
      pivot_reg (uint) - enum
      pivot_reg_used_offsets[varsize] (sint)
      next_rip_offset (sint)
    push_indirects[varsize]
      address (uint)
      indirect_type (uint) - enum: 0 = jmp, 1 = call
      push_reg (uint) - enum
      push_reg_used_offsets[varsize] (sint)
      indirect_reg (uint) - enum
      indirect_reg_used_offsets[varsize] (sint)
      next_rip_offset (sint)
    pop_rsps[varsize]
      address (uint)
      stack_change_before_rsp (uint)
      next_rip_offset (sint)
  struct_layout_indices[len(structs)] (uint) # 1-based, 0 means missing
struct_layouts[seekable_varsize]
  struct_meta_idx (uint)
  sizeof_structure (uint)
  fields[num_fields]
    offset (uint) # 1-based, 0 means missing
    field_size (uint)

u[N] = N-byte unsigned integer (u1 = uint8_t, u4 = uint32_t)
b[N] = N-bit unsigned integer (b4 = integer stored on 4 bits)
uint = generic, variable-sized unsigned integer
sint = generic, variable-sized signed integer
zstr = string with a terminating \0 character
varsize = array-size stored as uint before the array
seekable_varsize =
    array item end* offsets are stored as a varsize array before the array
    *end offsets to support skipping <n> elements (even all elements)
    so it expands to:
        hdr (uint) - "(item_count << 2) | offset_size"
            the 2 LSB bits: item size is also stored as int: 1 or 2 or 4
            other bits: value
        offset_size (uint)
        item_count (uint)
        end_offsets[item_count] (u1, u2 or u4 depending on offset_size)
        array_items[item_count]
